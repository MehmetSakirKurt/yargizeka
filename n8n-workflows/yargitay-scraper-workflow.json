{
  "name": "YargıZeka - Yargıtay Karar Scraper & Milvus Indexer",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "yargitay-scraper",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [180, 300],
      "webhookId": "yargitay-scraper"
    },
    {
      "parameters": {
        "functionCode": "// Yargıtay sitesini analiz et ve sayfa sayısını bul\nconst getPageCount = async () => {\n  const puppeteer = require('puppeteer');\n  \n  const browser = await puppeteer.launch({\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n  });\n  \n  try {\n    const page = await browser.newPage();\n    await page.goto('https://karararama.yargitay.gov.tr/');\n    \n    // Arama formunu doldur (tüm kararlar için)\n    await page.waitForSelector('#tarih1');\n    await page.type('#tarih1', '01/01/2020'); // Başlangıç tarihi\n    await page.type('#tarih2', new Date().toLocaleDateString('tr-TR')); // Bugün\n    \n    // Arama yap\n    await page.click('input[type=\"submit\"]');\n    await page.waitForNavigation();\n    \n    // Toplam sayfa sayısını al\n    const pageCount = await page.evaluate(() => {\n      const pageLinks = document.querySelectorAll('.sayfa a');\n      if (pageLinks.length > 0) {\n        return parseInt(pageLinks[pageLinks.length - 2].textContent);\n      }\n      return 1;\n    });\n    \n    await browser.close();\n    return { pageCount, status: 'success' };\n    \n  } catch (error) {\n    await browser.close();\n    throw error;\n  }\n};\n\nreturn await getPageCount();"
      },
      "id": "page-counter",
      "name": "Get Page Count",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "functionCode": "// Her sayfayı scrape etmek için batch oluştur\nconst pageCount = $json.pageCount;\nconst batchSize = 10; // Her seferde 10 sayfa işle\nconst batches = [];\n\nfor (let i = 1; i <= pageCount; i += batchSize) {\n  const endPage = Math.min(i + batchSize - 1, pageCount);\n  batches.push({\n    startPage: i,\n    endPage: endPage,\n    batchId: Math.ceil(i / batchSize)\n  });\n}\n\nreturn batches.map(batch => ({ json: batch }));"
      },
      "id": "batch-creator",
      "name": "Create Batches",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [620, 300]
    },
    {
      "parameters": {
        "functionCode": "// Batch içindeki sayfaları scrape et\nconst scrapeBatch = async () => {\n  const puppeteer = require('puppeteer');\n  const { startPage, endPage, batchId } = $json;\n  \n  const browser = await puppeteer.launch({\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n  });\n  \n  const decisions = [];\n  \n  try {\n    const page = await browser.newPage();\n    \n    for (let pageNum = startPage; pageNum <= endPage; pageNum++) {\n      console.log(`Scraping page ${pageNum}...`);\n      \n      // Sayfa URL'si\n      const url = `https://karararama.yargitay.gov.tr/YargitayBilgiBankasiIstemciWeb/GelismisCari?value=${pageNum}`;\n      await page.goto(url, { waitUntil: 'networkidle2' });\n      \n      // Sayfadaki kararları çek\n      const pageDecisions = await page.evaluate(() => {\n        const rows = document.querySelectorAll('table tr');\n        const decisions = [];\n        \n        rows.forEach((row, index) => {\n          if (index === 0) return; // Header skip\n          \n          const cells = row.querySelectorAll('td');\n          if (cells.length >= 6) {\n            const decision = {\n              dairesi: cells[0]?.textContent?.trim() || '',\n              esas_no: cells[1]?.textContent?.trim() || '',\n              karar_no: cells[2]?.textContent?.trim() || '',\n              karar_tarihi: cells[3]?.textContent?.trim() || '',\n              konu: cells[4]?.textContent?.trim() || '',\n              detay_link: cells[5]?.querySelector('a')?.href || ''\n            };\n            \n            if (decision.detay_link) {\n              decisions.push(decision);\n            }\n          }\n        });\n        \n        return decisions;\n      });\n      \n      decisions.push(...pageDecisions);\n      \n      // Rate limiting\n      await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \n    await browser.close();\n    \n    return {\n      batchId,\n      startPage,\n      endPage,\n      count: decisions.length,\n      decisions,\n      status: 'completed'\n    };\n    \n  } catch (error) {\n    await browser.close();\n    throw error;\n  }\n};\n\nreturn await scrapeBatch();"
      },
      "id": "scraper",
      "name": "Scrape Decisions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [840, 300]
    },
    {
      "parameters": {
        "functionCode": "// Her karar için detay sayfasını çek\nconst getDecisionDetails = async () => {\n  const puppeteer = require('puppeteer');\n  const decisions = $json.decisions;\n  \n  const browser = await puppeteer.launch({\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n  });\n  \n  const enrichedDecisions = [];\n  \n  try {\n    const page = await browser.newPage();\n    \n    for (let i = 0; i < decisions.length; i++) {\n      const decision = decisions[i];\n      \n      try {\n        await page.goto(decision.detay_link, { waitUntil: 'networkidle2', timeout: 30000 });\n        \n        const details = await page.evaluate(() => {\n          // Karar metnini bul\n          const content = document.querySelector('.karar-metni, .content, .decision-text');\n          const karar_metni = content ? content.textContent.trim() : '';\n          \n          // İlave bilgileri çek\n          const mahkeme = document.querySelector('[class*=\"mahkeme\"], [id*=\"mahkeme\"]')?.textContent?.trim() || '';\n          const kanun = document.querySelector('[class*=\"kanun\"], [id*=\"kanun\"]')?.textContent?.trim() || '';\n          \n          return {\n            karar_metni,\n            mahkeme,\n            kanun,\n            full_url: window.location.href\n          };\n        });\n        \n        enrichedDecisions.push({\n          ...decision,\n          ...details,\n          scraped_at: new Date().toISOString(),\n          word_count: details.karar_metni.split(' ').length\n        });\n        \n        console.log(`Processed decision ${i + 1}/${decisions.length}`);\n        \n        // Rate limiting\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n      } catch (detailError) {\n        console.error(`Error processing decision ${i + 1}:`, detailError);\n        // Skip bu karar, devam et\n        enrichedDecisions.push({\n          ...decision,\n          karar_metni: '',\n          error: detailError.message,\n          scraped_at: new Date().toISOString()\n        });\n      }\n    }\n    \n    await browser.close();\n    \n    return {\n      batchId: $json.batchId,\n      processed_count: enrichedDecisions.length,\n      decisions: enrichedDecisions,\n      status: 'enriched'\n    };\n    \n  } catch (error) {\n    await browser.close();\n    throw error;\n  }\n};\n\nreturn await getDecisionDetails();"
      },
      "id": "detail-scraper",
      "name": "Get Decision Details",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1060, 300]
    },
    {
      "parameters": {
        "functionCode": "// PostgreSQL'e bulk insert\nconst insertToPostgres = async () => {\n  const { Pool } = require('pg');\n  const decisions = $json.decisions;\n  \n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL\n  });\n  \n  try {\n    // Tablo oluştur (eğer yoksa)\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS yargitay_decisions (\n        id BIGSERIAL PRIMARY KEY,\n        dairesi VARCHAR(100),\n        esas_no VARCHAR(100),\n        karar_no VARCHAR(100),\n        karar_tarihi VARCHAR(50),\n        konu VARCHAR(500),\n        mahkeme VARCHAR(200),\n        kanun TEXT,\n        karar_metni TEXT,\n        detay_link TEXT,\n        full_url TEXT,\n        word_count INTEGER,\n        scraped_at TIMESTAMPTZ,\n        vector_indexed BOOLEAN DEFAULT FALSE,\n        created_at TIMESTAMPTZ DEFAULT NOW(),\n        UNIQUE(esas_no, karar_no, karar_tarihi)\n      )\n    `);\n    \n    let insertedCount = 0;\n    \n    for (const decision of decisions) {\n      try {\n        await pool.query(`\n          INSERT INTO yargitay_decisions (\n            dairesi, esas_no, karar_no, karar_tarihi, konu,\n            mahkeme, kanun, karar_metni, detay_link, full_url,\n            word_count, scraped_at\n          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n          ON CONFLICT (esas_no, karar_no, karar_tarihi) DO UPDATE SET\n            karar_metni = EXCLUDED.karar_metni,\n            vector_indexed = FALSE\n        `, [\n          decision.dairesi, decision.esas_no, decision.karar_no,\n          decision.karar_tarihi, decision.konu, decision.mahkeme,\n          decision.kanun, decision.karar_metni, decision.detay_link,\n          decision.full_url, decision.word_count, decision.scraped_at\n        ]);\n        \n        insertedCount++;\n      } catch (insertError) {\n        console.error('Insert error:', insertError);\n      }\n    }\n    \n    await pool.end();\n    \n    return {\n      batchId: $json.batchId,\n      inserted_count: insertedCount,\n      total_decisions: decisions.length,\n      status: 'postgres_inserted'\n    };\n    \n  } catch (error) {\n    await pool.end();\n    throw error;\n  }\n};\n\nreturn await insertToPostgres();"
      },
      "id": "postgres-insert",
      "name": "Insert to PostgreSQL",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1280, 300]
    },
    {
      "parameters": {
        "functionCode": "// Milvus vektör veritabanına indexle\nconst indexToMilvus = async () => {\n  const { MilvusClient } = require('@zilliz/milvus2-sdk-node');\n  const OpenAI = require('openai');\n  \n  const decisions = $json.decisions;\n  \n  // OpenAI client\n  const openai = new OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n  });\n  \n  // Milvus client\n  const milvusClient = new MilvusClient({\n    address: process.env.MILVUS_HOST || 'localhost:19530'\n  });\n  \n  try {\n    // Collection oluştur (eğer yoksa)\n    const collectionName = 'yargitay_decisions';\n    \n    const hasCollection = await milvusClient.hasCollection({\n      collection_name: collectionName\n    });\n    \n    if (!hasCollection.value) {\n      await milvusClient.createCollection({\n        collection_name: collectionName,\n        fields: [\n          {\n            name: 'id',\n            data_type: 'Int64',\n            is_primary_key: true,\n            auto_id: true\n          },\n          {\n            name: 'decision_id',\n            data_type: 'VarChar',\n            max_length: 200\n          },\n          {\n            name: 'content_vector',\n            data_type: 'FloatVector',\n            dim: 1536 // OpenAI text-embedding-ada-002 boyutu\n          },\n          {\n            name: 'dairesi',\n            data_type: 'VarChar',\n            max_length: 100\n          },\n          {\n            name: 'karar_tarihi',\n            data_type: 'VarChar',\n            max_length: 50\n          },\n          {\n            name: 'konu',\n            data_type: 'VarChar',\n            max_length: 500\n          }\n        ]\n      });\n      \n      // Index oluştur\n      await milvusClient.createIndex({\n        collection_name: collectionName,\n        field_name: 'content_vector',\n        index_type: 'IVF_FLAT',\n        metric_type: 'IP',\n        params: { nlist: 1024 }\n      });\n    }\n    \n    // Collection'ı yükle\n    await milvusClient.loadCollection({\n      collection_name: collectionName\n    });\n    \n    const vectors = [];\n    \n    for (let i = 0; i < decisions.length; i++) {\n      const decision = decisions[i];\n      \n      if (!decision.karar_metni || decision.karar_metni.length < 100) {\n        continue; // Çok kısa metinleri skip et\n      }\n      \n      try {\n        // Metni embedding'e çevir\n        const response = await openai.embeddings.create({\n          model: 'text-embedding-ada-002',\n          input: `${decision.konu} ${decision.karar_metni}`.substring(0, 8000)\n        });\n        \n        const vector = response.data[0].embedding;\n        \n        vectors.push({\n          decision_id: `${decision.esas_no}_${decision.karar_no}`,\n          content_vector: vector,\n          dairesi: decision.dairesi || '',\n          karar_tarihi: decision.karar_tarihi || '',\n          konu: (decision.konu || '').substring(0, 500)\n        });\n        \n        console.log(`Vectorized ${i + 1}/${decisions.length}`);\n        \n        // Rate limiting for OpenAI\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n      } catch (vectorError) {\n        console.error(`Vectorization error for decision ${i + 1}:`, vectorError);\n      }\n    }\n    \n    // Milvus'a insert et\n    if (vectors.length > 0) {\n      await milvusClient.insert({\n        collection_name: collectionName,\n        data: vectors\n      });\n      \n      await milvusClient.flush({\n        collection_names: [collectionName]\n      });\n    }\n    \n    return {\n      batchId: $json.batchId,\n      vectorized_count: vectors.length,\n      total_decisions: decisions.length,\n      status: 'milvus_indexed'\n    };\n    \n  } catch (error) {\n    throw error;\n  } finally {\n    // Milvus bağlantısını kapat\n    // await milvusClient.closeConnection();\n  }\n};\n\nreturn await indexToMilvus();"
      },
      "id": "milvus-indexer",
      "name": "Index to Milvus",\n      "type": "n8n-nodes-base.function",\n      "typeVersion": 1,\n      "position": [1500, 300]\n    },\n    {\n      "parameters": {\n        "options": {\n          "rawBody": true\n        },\n        "responseBody": "={\n  \"success\": true,\n  \"batch_id\": \"{{ $json.batchId }}\",\n  \"message\": \"Batch {{ $json.batchId }} successfully processed\",\n  \"stats\": {\n    \"postgres_inserted\": {{ $('postgres-insert').first().json.inserted_count }},\n    \"milvus_indexed\": {{ $json.vectorized_count }},\n    \"total_processed\": {{ $json.total_decisions }}\n  },\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}"\n      },\n      "id": "response",\n      "name": "Response",\n      "type": "n8n-nodes-base.respondToWebhook",\n      "typeVersion": 1,\n      "position": [1720, 300]\n    }\n  ],\n  "connections": {\n    "webhook-trigger": {\n      "main": [\n        [\n          {\n            "node": "page-counter",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "page-counter": {\n      "main": [\n        [\n          {\n            "node": "batch-creator",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "batch-creator": {\n      "main": [\n        [\n          {\n            "node": "scraper",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "scraper": {\n      "main": [\n        [\n          {\n            "node": "detail-scraper",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "detail-scraper": {\n      "main": [\n        [\n          {\n            "node": "postgres-insert",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "postgres-insert": {\n      "main": [\n        [\n          {\n            "node": "milvus-indexer",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    },\n    "milvus-indexer": {\n      "main": [\n        [\n          {\n            "node": "response",\n            "type": "main",\n            "index": 0\n          }\n        ]\n      ]\n    }\n  }\n}