{
  "meta": {
    "instanceId": "yargizeka-n8n"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/webhook/yargizeka-petition",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-petition",
      "name": "Petition Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "yargizeka-petition"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.petition_type}}",
              "operation": "isNotEmpty"
            },
            {
              "value1": "={{$json.user_data}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "validate-petition-input",
      "name": "Validate Petition Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process petition data and create structured prompt\nconst petitionType = $json.petition_type;\nconst userData = $json.user_data;\n\n// Create detailed prompt based on petition type\nlet prompt = \"\";\nlet template = \"\";\n\nswitch (petitionType) {\n  case 'tazminat':\n    template = `\nTAZMİNAT DAVASI DİLEKÇESİ\n\n{mahkeme_adi} MAHKEMESİNİN SAYGIYLA\n\nDAVACI\nAdı Soyadı: {davaci_adi}\nT.C. Kimlik No: {davaci_tc}\nAdresi: {davaci_adres}\nTelefon: {davaci_telefon}\n\nDAVALI\nAdı Soyadı: {davali_adi}\nAdresi: {davali_adres}\n\nDAVA KONUSU: Tazminat\nDAVA DEĞERİ: {tazminat_miktari} TL\n\nMADDİ OLAY\n{olay_aciklamasi}\n\nHUKUKİ SEBEPLER\n{hukuki_dayanak}\n\nTALEP\nYukarıda açıklanan nedenlerle;\n1- Davalıdan {tazminat_miktari} TL tazminat talebimin kabulü,\n2- Vekalet ücretinin davalıdan tahsili,\n3- Yargılama giderlerinin davalıdan alınması,\ntalep ederim.\n\nEkler:\n{ekler}\n\nTarih: {tarih}\nDavacı İmzası\n`;\n    break;\n    \n  case 'bosanma':\n    template = `\nBOŞANMA DAVASI DİLEKÇESİ\n\n{mahkeme_adi} AİLE MAHKEMESİNİN SAYGIYLA\n\nDAVACI\nAdı Soyadı: {davaci_adi}\nT.C. Kimlik No: {davaci_tc}\nAdresi: {davaci_adres}\nTelefon: {davaci_telefon}\n\nDAVALI\nAdı Soyadı: {davali_adi}\nT.C. Kimlik No: {davali_tc}\nAdresi: {davali_adres}\n\nDAVA KONUSU: Boşanma\nEVLİLİK TARİHİ: {evlilik_tarihi}\nEVLİLİK YERİ: {evlilik_yeri}\n\nMADDİ OLAY\n{evlilik_durumu}\n\nHUKUKİ SEBEPLER\nTürk Medeni Kanunu'nun 166. maddesi gereğince;\n{bosanma_sebepleri}\n\nTALEP\nYukarıda açıklanan nedenlerle;\n1- Evliliğimizin boşanma ile sona erdirilmesi,\n2- {cocuk_var ? 'Çocuklarımızın velayetinin bana verilmesi,' : ''}\n3- {nafaka_var ? 'Nafaka bağlanması,' : ''}\n4- Vekalet ücretinin davalıdan tahsili,\ntalep ederim.\n\nEkler:\n{ekler}\n\nTarih: {tarih}\nDavacı\n`;\n    break;\n    \n  case 'icra_itiraz':\n    template = `\nİCRA TAKİBİNE İTİRAZ DİLEKÇESİ\n\n{icra_mudurlugu} İCRA MÜDÜRLÜĞÜNE\n\nBORÇLU\nAdı Soyadı: {borclu_adi}\nT.C. Kimlik No: {borclu_tc}\nAdresi: {borclu_adres}\nTelefon: {borclu_telefon}\n\nALACEKLI\nAdı Soyadı: {alacekli_adi}\nAdresi: {alacekli_adres}\n\nİCRA DOSYA NO: {dosya_no}\nTAKİP TUTARI: {takip_tutari} TL\n\nİTİRAZ SEBEBİ\n{itiraz_sebepleri}\n\nHUKUKİ DAYANAK\n{hukuki_dayanak}\n\nTALEP\nYukarıda açıklanan nedenlerle;\n1- Hakkımda başlatılan icra takibine itiraz ederim,\n2- Takibin durdurulmasını,\n3- {borcu_yok ? 'Borcun olmadığının tespitini,' : 'Borç miktarının düzeltilmesini,'}\ntalep ederim.\n\nEkler:\n{ekler}\n\nTarih: {tarih}\nBorçlu\n`;\n    break;\n    \n  default:\n    template = \"Geçersiz dilekçe türü\";\n}\n\nprompt = `Aşağıdaki şablonu kullanarak profesyonel bir hukuki dilekçe oluştur. Boş alanları verilen bilgilerle doldur ve eksik olan kısımları mantıklı şekilde tamamla.\n\nŞablon:\n${template}\n\nKullanıcı Verileri:\n${JSON.stringify(userData, null, 2)}\n\nDikkat edilecek hususlar:\n- Tüm hukuki terimler doğru kullanılmalı\n- Tarih formatı gün/ay/yıl şeklinde olmalı\n- Maddi olaylar detaylı ve anlaşılır yazılmalı\n- Hukuki dayanaklar güncel mevzuata uygun olmalı\n- Eksik bilgiler için [BİLGİ GEREKLİ] notasyonu kullan`;\n\nreturn {\n  petition_type: petitionType,\n  user_data: userData,\n  ai_prompt: prompt,\n  template: template\n};"
      },
      "id": "prepare-petition-prompt",
      "name": "Prepare Petition Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "model": "gemini-pro",
        "prompt": "={{$json.ai_prompt}}",
        "options": {
          "temperature": 0.3,
          "maxTokens": 2000
        }
      },
      "id": "gemini-petition",
      "name": "Gemini Petition Generator",
      "type": "n8n-nodes-base.googleGemini",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format and validate the generated petition\nconst generatedContent = $input.first().json.response || $input.first().json.text || \"Dilekçe oluşturulamadı\";\nconst originalData = $input.first().json;\n\n// Clean and format the petition\nlet formattedPetition = generatedContent\n  .replace(/\\*\\*/g, '') // Remove markdown bold\n  .replace(/\\*/g, '') // Remove asterisks\n  .trim();\n\n// Add professional header if not present\nif (!formattedPetition.includes('MAHKEMESİNİN SAYGIYLA') && !formattedPetition.includes('MÜDÜRLÜĞÜNE')) {\n  formattedPetition = \"SAYIN MAHKEMENİN SAYGIYLA\\n\\n\" + formattedPetition;\n}\n\n// Add professional footer\nformattedPetition += \"\\n\\n\" + new Date().toLocaleDateString('tr-TR') + \"\\n\\nSaygılarımla,\\n[İMZA]\";\n\n// Add legal disclaimer\nconst disclaimer = \"\\n\\n⚖️ DİKKAT: Bu dilekçe AI tarafından oluşturulmuş bir taslaktır. Mahkemeye sunmadan önce mutlaka bir hukukçu tarafından gözden geçirilmelidir.\";\n\nreturn {\n  petition_content: formattedPetition + disclaimer,\n  petition_type: originalData.petition_type,\n  generated_at: new Date().toISOString(),\n  word_count: formattedPetition.split(' ').length,\n  tokens_used: Math.ceil(formattedPetition.length / 4)\n};"
      },
      "id": "format-petition",
      "name": "Format Petition",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}"
      },
      "id": "petition-success-response",
      "name": "Petition Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": 400,
        "responseBody": "{\"error\": \"Eksik parametreler\", \"message\": \"petition_type ve user_data parametreleri gerekli\"}"
      },
      "id": "petition-error-response",
      "name": "Petition Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 500]
    },
    {
      "parameters": {
        "jsCode": "// Log petition generation\nconst logData = {\n  timestamp: new Date().toISOString(),\n  petition_type: $json.petition_type,\n  word_count: $json.word_count,\n  tokens_used: $json.tokens_used,\n  user_data_keys: Object.keys($json.user_data || {}),\n  source: 'n8n-petition-workflow'\n};\n\nconsole.log('Petition generation logged:', logData);\n\n// Store in file for analytics (optional)\nreturn logData;"
      },
      "id": "log-petition",
      "name": "Log Petition Generation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 500]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.petition_content}}",
              "operation": "contains",
              "value2": "oluşturulamadı"
            }
          ]
        }
      },
      "id": "check-generation-success",
      "name": "Check Generation Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 500]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseCode": 500,
        "responseBody": "{\"error\": \"Dilekçe oluşturulamadı\", \"message\": \"AI servisi şu anda kullanılamıyor. Lütfen daha sonra tekrar deneyin.\"}"
      },
      "id": "generation-failure-response",
      "name": "Generation Failure Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 700]
    }
  ],
  "connections": {
    "Petition Webhook": {
      "main": [
        [
          {
            "node": "Validate Petition Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Petition Input": {
      "main": [
        [
          {
            "node": "Prepare Petition Prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Petition Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Petition Prompt": {
      "main": [
        [
          {
            "node": "Gemini Petition Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Petition Generator": {
      "main": [
        [
          {
            "node": "Format Petition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Petition": {
      "main": [
        [
          {
            "node": "Check Generation Success",
            "type": "main",
            "index": 0
          },
          {
            "node": "Petition Success Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Petition Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Generation Success": {
      "main": [
        [
          {
            "node": "Generation Failure Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-06-19T10:00:00.000Z",
      "updatedAt": "2025-06-19T10:00:00.000Z",
      "id": "yargizeka-petition",
      "name": "YargıZeka Petition"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-19T10:00:00.000Z",
  "versionId": "1"
}